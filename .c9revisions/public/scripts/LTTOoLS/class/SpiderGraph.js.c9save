{"ts":1368897948752,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"LT_TOOLS.SpiderGraph = (function () {\n    //©2013 Loïc TRUCHOT\n    //Outils requis : LT_TOOLS.oSvgHelper\n    //Outils requis : LT_TOOLS.oMathHelper\n    //Outils requis : LT_TOOLS.oStringHelper\n    //Outils requis : LT_TOOLS.oErrorHelper\n    \n    \"use strict\";\n    //constantes de classe\n    SpiderGraph.NB_AXES_MIN = 3;\n    SpiderGraph.NB_AXES_MAX = 10;\n    SpiderGraph.NB_ECHELONS_MIN = 3;\n    SpiderGraph.NB_ECHELONS_MAX = 10;\n    SpiderGraph.NB_AIRES_MIN = 1;\n    SpiderGraph.NB_AIRES_MAX = 3;\n    \n    //variables de classe\n    SpiderGraph.nombre = 0;\n    \n    function SpiderGraph (iTailleCadreSvg, tabAxes, tabEchelons, tabAires, sTitre, bLegende) {\n        \n        //Références à LT TOOLS\n        this.oMath = LT_TOOLS.oMathHelper;\n        this.oSvg = LT_TOOLS.oSvgHelper;\n        this.oString = LT_TOOLS.oStringHelper;\n        this.oError = LT_TOOLS.oErrorHelper;\n        \n        //gestion des erreurs\n        this.tabMsgErreur = [];\n        \n        //elements obligatoires\n        this.iTailleCadreSvg = this.oError.confirmerTypePropriete(this.tabMsgErreur, iTailleCadreSvg, \"number\", \"la taille du graphique doit être saisie\");\n        this.tabAxes = this.oError.confirmerTypePropriete(this.tabMsgErreur, tabAxes, \"array\", \"il faut définir entre \" + SpiderGraph.NB_AXES_MIN + \" et \" + SpiderGraph.NB_AXES_MAX + \" axes au graphique\");\n        \n        //elements subsidiaires\n        this.tabEchelons = tabEchelons || [];\n        this.tabAires = tabAires || [];\n        this.sTitre = sTitre || \"\";\n        this.bLegende = bLegende || false;\n        \n        \n        //données statistiques        \n        this.iNbAxes = this.tabAxes.length;        \n        this.iNbEchelons = this.tabEchelons.length;        \n        \n        //données géométriques        \n        this.iTailleDemiCadre = iTailleCadreSvg / 2;\n        this.iTailleMargeInterne = 0.5 * this.iTailleCadreSvg;        \n        this.sTailleCadreSvgCoteEnPx = this.iTailleCadreSvg + \"px\";\n        this.iTailleAxe = (this.iTailleCadreSvg - this.iTailleMargeInterne)  / 2;\n        \n                \n        //données géométriques calculées\n        this.iTailleAngle = 360 / this.iNbAxes;        \n        this.iQuotienY1 = this.oMath.arrondir(- (this.iTailleAxe / (this.iNbEchelons -1)), 2);\n        this.iQuotienY2 = this.oMath.arrondir(this.iQuotienY1 * this.oMath.cosinus(this.iTailleAngle), 2);\n        this.iQuotienX2 = this.oMath.arrondir(this.iQuotienY1 * this.oMath.sinus(this.iTailleAngle), 2);\n        this.tabCoordonnees = this.calculerMatriceCoordonnees();\n        \n        \n        //données DOM/SVG calculées      \n        this.sIdSvgCadre = \"spiderGraph\" + SpiderGraph.nombre; \n        \n        //construction du graphique\n        this.sGraphiqueSvg = this.creerGraphiqueSvg();\n        this.nodeGraphiqueSvg = this.oSvg.parser(this.sGraphiqueSvg);\n        \n        //rapport d'erreurs\n        this.oError.enregistrerErreurs(this.tabMsgErreur, this.sNomObjet);\n        \n        //action sur les variables de classe\n        SpiderGraph.nombre++; \n        \n    }    \n    SpiderGraph.prototype = {        \n        creerGraphiqueSvg : function () {\n            var sGraphique = \"\";\n            var sDefs = this.creerGraphDefinition();\n        \n            //titre\n            sGraphique += this.ecrireGraphTitre();\n            \n            //Contenu\n            if (sDefs !== \"\") {\n                sGraphique += sDefs;\n                sGraphique += \"\\t\" + '<g transform=\"translate(' + this.iTailleDemiCadre + ', ' + this.iTailleDemiCadre + ')\">' + \"\\n\";\n                sGraphique += this.creerRotationDesDefinitions();\n                sGraphique += this.dessinerGraphAires();\n                sGraphique += this.ecrireGraphEchelons();\n                sGraphique += this.ecrireGraphAxes();\n                sGraphique += \"\\t\" + '</g>' + \"\\n\";\n            }\n           \n            \n            //Legende            \n            sGraphique += this.ecrireGraphLegende();\n            \n            sGraphique = this.insererDansEltSvg(sGraphique);\n            \n            return sGraphique;\n        },\n        insererDansEltSvg : function (sContenuSvg) {\n            \n            //---------- debut variables -----------\n            var sEltSvg = \"\";\n            var sEnteteSvg = \"\";\n            var sPiedSvg = \"\"; \n            var tabAttributs = {                               \n                \"version\" : \"1.1\",\n                \"xmlns:xlink\"  : \"http://www.w3.org/1999/xlink\",\n                \"xmlns\" : \"http://www.w3.org/2000/svg\",\n                \"class\" : \"SpiderGraph\",\n                \"height\" : this.sTailleCadreSvgCoteEnPx,\n                \"width\" : this.sTailleCadreSvgCoteEnPx,\n                \"id\" : this.sIdSvgCadre                \n            }; \n            //---------- fin variables -----------\n            \n            \n            //---------- debut procédure ------------\n            //entete\n            sEnteteSvg += '<svg';\n            for (var cleAttr in tabAttributs) {\n                sEnteteSvg += ' ' + cleAttr + '=\"' + tabAttributs[cleAttr] + '\"';\n            }       \n            sEnteteSvg += '>' + \"\\n\";\n            \n            //pied\n            sPiedSvg += '</svg>' + \"\\n\";  \n            \n            //element final\n            sEltSvg = sEnteteSvg + sContenuSvg + sPiedSvg;\n            //---------- fin procédure ------------\n            \n            return sEltSvg;            \n        },\n        creerGraphDefinition : function () {\n            var sDefs = \"\";\n            var sAxePrimaire = this.dessinerDefAxePrimaire();\n            if (sAxePrimaire !== \"\") {\n                sDefs += \"\\t\" + '<defs>' + \"\\n\";\n                sDefs += \"\\t\\t\" + '<g id=\"toile\">' + \"\\n\";            \n                sDefs += sAxePrimaire;  \n                sDefs += this.dessinerDefEchelonsPrimaires();            \n                sDefs += \"\\t\\t\" + '</g>' + \"\\n\";\n                sDefs += \"\\t\" + '</defs>' + \"\\n\";\n            }\n            return sDefs;\n        },        \n        dessinerDefAxePrimaire : function () {\n            var sAxePrimaire = \"\";\n            if (this.iNbAxes >= SpiderGraph.NB_AXES_MIN && this.iNbAxes <= SpiderGraph.NB_AXES_MAX) {\n                sAxePrimaire += \"\\t\\t\\t\" + '<line class=\"rayon\" y2=\"' + ( - this.iTailleAxe)  +'\"/>' + \"\\n\"; \n            }\n            return sAxePrimaire;\n        },\n        dessinerDefEchelonsPrimaires : function () {\n            var sEchelonsPrimaires = \"\";\n            if (this.iNbEchelons >= SpiderGraph.NB_ECHELONS_MIN && this.iNbEchelons <= SpiderGraph.NB_ECHELONS_MAX) {\n                var iX2 = this.iQuotienX2;\n                var iY1 = this.iQuotienY1;\n                var iY2 = this.iQuotienY2;\n                for (var cpt = 0; cpt < (this.iNbEchelons - 1); cpt++) {\n                   sEchelonsPrimaires += \"\\t\\t\\t\" + '<line x1=\"0\" x2=\"' + iX2 + '\" y1=\"' + iY1 + '\" y2=\"' + iY2 + '\" />' + \"\\n\"; \n                    iX2 += this.iQuotienX2;\n                    iY1 += this.iQuotienY1;\n                    iY2 += this.iQuotienY2;\n                } \n            }\n            return sEchelonsPrimaires;            \n        },\n        creerRotationDesDefinitions : function () {\n            var sRotations = \"\";\n            var iRotation = 0;\n            for (var cleAxes in this.tabAxes) {                \n                sRotations += \"\\t\\t\" + '<use xlink:href=\"#toile\" transform=\"rotate(' + iRotation + ')\" />' + \"\\n\";\n                iRotation += this.iTailleAngle;\n            }       \n            return sRotations;\n        },\n        dessinerGraphAires : function () {\n            var sAires = \"\";\n            for (var cleAire in this.tabAires) {\n                sAires += '<polygon style=\"stroke:' + this.tabAires[cleAire][0] + ';\" ';\n                var sPoints = \"\";\n                var tabAireEchelon = this.tabAires[cleAire][1];\n                for (var iAxe in tabAireEchelon) {                    \n                    var iEchelon = tabAireEchelon[iAxe];\n                    sPoints += this.tabCoordonnees[iAxe][iEchelon].x   + \",\" + this.tabCoordonnees[iAxe][iEchelon].y + \" \";                    \n                }\n                sAires += 'points=\"' + sPoints + '\" />';\n            }\n            return sAires;\n        },\n        ecrireGraphTitre : function () {\n            var sTitre = \"\";\n            if (this.sTitre !== \"\") {\n                sTitre += \"\\t\" + '<g transform=\"translate(' + this.iTailleDemiCadre + ' 25)\"  id=\"titre\">' + \"\\n\";\n                sTitre += \"\\t\\t\" + '<text>' + this.sTitre + '</text>' + \"\\n\"; \n                sTitre +=  \"\\t\" + '</g>' + \"\\n\";\n            }\n            return sTitre;            \n        },\n        ecrireGraphEchelons : function () {\n            var sNomsDesValeurs = \"\";\n            sNomsDesValeurs += \"\\t\\t\" + '<g id=\"valeurs\">' + \"\\n\";\n            var iY = 0;            \n            for (var sEchelon in this.tabEchelons) {\n                sNomsDesValeurs += \"\\t\\t\\t\" + '<text x=\"5\" y=\"' + (iY + 3) + '\">' + this.tabEchelons[sEchelon] + '</text>' + \"\\n\";\n                iY += this.iQuotienY1;\n            }\n            sNomsDesValeurs += \"\\t\\t\" + '</g>' + \"\\n\";\n            return sNomsDesValeurs;\n        },\n        ecrireGraphAxes : function () {\n            var sNomsDesAxes = \"\";            \n            sNomsDesAxes = '<g id=\"labels\">';\n            var cptAxe = 0;\n            for (var iAxe in this.tabAxes) {\n                var iX = this.tabCoordonnees[cptAxe][this.iNbEchelons - 1].x;\n                var iY = this.tabCoordonnees[cptAxe][this.iNbEchelons - 1].y;                \n                var tabPlusieursMots = [];\n                var sNomAxe = this.tabAxes[iAxe];\n                \n                //ajustement du nombre de ligne du texte\n                if (iX !== 0) {\n                    tabPlusieursMots = this.oString.decouperMotsParLongueur(sNomAxe, 12, \" \");\n                } \n                else {\n                    tabPlusieursMots[0] = sNomAxe;\n                }\n                \n                //ajustement de l'emplacement du texte\n                //Nord\n                var sStyleModificateur = \"\";\n                if (iX === 0 && iY < 0) {\n                        iY -= 15;                     \n                }\n                //Sud\n                else if (iX === 0 && iY > 0) {\n                iY += 15; \n                }\n                //Est\n                else if (iX > 0) {\n                    iX += 5;\n                    iY += 5;\n                    sStyleModificateur = 'style=\"text-anchor:start;\"';\n                }\n                //Ouest\n                else if (iX < 0) {\n                    iX -= 5;\n                    iY += 5;\n                    sStyleModificateur = 'style=\"text-anchor:end;\"';\n                }                 \n                for (var cleMot in tabPlusieursMots) {\n                    if (cleMot > 0) {\n                        iY += 12;\n                    }\n                    sNomsDesAxes += \"\\t\\t\\t\" + '<text x=\"' + iX + '\" y=\"' + iY + '\" ' + sStyleModificateur +  ' >' + tabPlusieursMots[cleMot] + '</text>' + \"\\n\";                      \n                }  \n                cptAxe++;  \n            }\n            sNomsDesAxes += \"</g>\";\n            return sNomsDesAxes;\n        },\n        ecrireGraphLegende : function () {\n            var sLegende = \"\";\n            if (this.bLegende) {\n                sLegende += \"\\t\" + '<g transform=\"translate(' + (this.iTailleMargeInterne / 4) + ' ' + (this.iTailleCadreSvg - (this.iTailleMargeInterne / 4)) + ')\"  id=\"legende\">' + \"\\n\";\n                var iY = 0;\n                for (var cleAire in this.tabAires) {\n                    sLegende += \"\\t\\t\" + '<line style=\"stroke:' + this.tabAires[cleAire][0] + ';\" y1=\"' + iY + '\" y2=\"' + iY + '\" x2=\"20\" />' + \"\\n\";\n                    sLegende += \"\\t\\t\" + '<text x=\"30\" y=\"' + (iY + 3) + '\">' + cleAire + '</text>' + \"\\n\";\n                    iY += 15;\n                }\n                sLegende +=  \"\\t\" + '</g>' + \"\\n\";\n            }\n            return sLegende;\n        },\n        calculerMatriceCoordonnees : function () {\n            var tabCoordonnees = [];\n            var iXEnRotation = 0;\n            var iYEnRotation = this.iQuotienY1;\n            \n            //échelons de l'axe 0\n            tabCoordonnees[0] = [];\n            for (var iEchelonDeLAxe0 = 0; iEchelonDeLAxe0 < this.iNbEchelons; iEchelonDeLAxe0++) {\n                tabCoordonnees[0][iEchelonDeLAxe0] = { \"x\" : 0, \"y\" : this.oMath.arrondir(this.iQuotienY1 * iEchelonDeLAxe0, 2)}; \n            }\n            \n            //échelons des autres axes par rotation\n            for (var iAxe = 1; iAxe < this.iNbAxes; iAxe++){                \n                tabCoordonnees[iAxe] = []; \n                for (var iEchelon = 0; iEchelon < this.iNbEchelons; iEchelon++) {\n                    \n                    //récupération des valeur d'échelon sur l'axe précédent\n                    iXEnRotation = tabCoordonnees[iAxe-1][iEchelon].x;\n                    iYEnRotation = tabCoordonnees[iAxe-1][iEchelon].y;\n                    \n                    //rotation des valeurs\n                    var iX = (iXEnRotation * this.oMath.cosinus(this.iTailleAngle)) - (iYEnRotation  * this.oMath.sinus(this.iTailleAngle));\n                    var iY = (iXEnRotation * this.oMath.sinus(this.iTailleAngle)) + (iYEnRotation  * this.oMath.cosinus(this.iTailleAngle));\n                    iXEnRotation = this.oMath.arrondir(iX, 2);\n                    iYEnRotation = this.oMath.arrondir(iY, 2);                                       \n                    tabCoordonnees[iAxe][iEchelon] = { \"x\" : iXEnRotation, \"y\" : iYEnRotation};                    \n                }                 \n            }\n            return tabCoordonnees;\n        }\n    }; \n    return SpiderGraph;\n} ()); "]],"start1":0,"start2":0,"length1":0,"length2":13748}]],"length":13748}
